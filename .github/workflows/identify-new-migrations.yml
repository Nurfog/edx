name: identify any newly added or removed migrations

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  identify_migrations:
    name: identify migrations
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.8 ]
        # 'pinned' is used to install the latest patch version of Django
        # within the global constraint i.e. Django==3.2.21 in current case
        # because we have global constraint of Django<4.2
        django-version: ["4.2"]
        mongo-version: ["4"]
        mysql-version: ["8"]
        # excluding mysql5.7 with Django 4.2 since Django 4.2 has
        # dropped support for MySQL<8
        exclude:
          - django-version: "4.2"
            mysql-version: "5.7"
    services:
      mongo:
        image: mongo:${{ matrix.mongo-version }}
        ports:
          - 27017:27017
        # Note: Calling mongo here only works with mongo 4, in newer versions of mongo
        # we'll have to use `mongosh`
        options: >-
          --health-cmd "mongo --quiet --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
      mysql:
        image: mysql:${{ matrix.mysql-version }}
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: "edxapp"
          MYSQL_USER: "edxapp001"
          MYSQL_PASSWORD: "password"
          MYSQL_RANDOM_ROOT_PASSWORD: true
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    steps:
    - name: Setup mongodb user
      run: |
        mongosh edxapp --eval '
          db.createUser(
            {
              user: "edxapp",
              pwd:  "password",
              roles: [
                   { role: "readWrite", db: "edxapp" },
              ]
            }
          );
        '

    - name: Verify mongo and mysql db credentials
      run: |
        mysql -h 127.0.0.1 -uedxapp001 -ppassword -e "select 1;" edxapp
        mongosh --host 127.0.0.1 --username edxapp --password password --eval 'use edxapp; db.adminCommand("ping");' edxapp

    - name: Checkout master repo
      uses: actions/checkout@v2
      with:
        ref: master

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system Packages
      run: |
        sudo apt-get update
        make ubuntu-requirements

    - name: Get pip cache dir
      id: pip-cache-dir
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/edx/development.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        make dev-requirements
        if [[ "${{ matrix.django-version }}" != "pinned" ]]; then
          pip install "django~=${{ matrix.django-version }}.0"
          pip check # fail if this test-reqs/Django combination is broken
        fi

    - name: Run migrations on master branch
      env:
        LMS_CFG: lms/envs/minimal.yml
        # This is from the LMS dir on purpose since we don't need anything different for the CMS yet.
        STUDIO_CFG: lms/envs/minimal.yml
      run: |
        echo "Running the LMS migrations."
        ./manage.py lms migrate
        echo "Running the CMS migrations."
        ./manage.py cms migrate

    - name: Verify executed migrations on master.
      shell: bash
      run: |
        query_result1=$(mysql -h 127.0.0.1 -uedxapp001 -ppassword -e "select count(*) from django_migrations;" edxapp;)
        echo "echo $query_result1"
        numeric_result=$(echo "$query_result1" | tr -d '\n' | sed -E 's/[^0-9]+//g')
        echo "Numeric Result: $numeric_result"
        echo "FIRST_QUERY=$numeric_result" >> $GITHUB_ENV

    - name: Checkout your branch repo
      uses: actions/checkout@v2

    - name: Install Python dependencies
      run: |
        make dev-requirements
        if [[ "${{ matrix.django-version }}" != "pinned" ]]; then
          pip install "django~=${{ matrix.django-version }}.0"
          pip check # fail if this test-reqs/Django combination is broken
        fi

    - name: list installed package versions
      run: |
        pip freeze

    - name: identify any new migrations
      env:
        LMS_CFG: lms/envs/minimal.yml
        # This is from the LMS dir on purpose since we don't need anything different for the CMS yet.
        STUDIO_CFG: lms/envs/minimal.yml
      run: |
        echo "Running the LMS migrations."
        ./manage.py lms makemigrations
        ./manage.py lms migrate
        echo "Running the CMS migrations."
        ./manage.py cms makemigrations
        ./manage.py cms migrate

    - name: Verify executed migrations on your branch.
      shell: bash
      id: capture2
      run: |
        query_result1=$(mysql -h 127.0.0.1 -uedxapp001 -ppassword -e "select count(*) from django_migrations;" edxapp;)
        echo "echo $query_result1"
        numeric_result=$(echo "$query_result1" | tr -d '\n' | sed -E 's/[^0-9]+//g')
        echo "Numeric Result: $numeric_result"
        echo "SECOND_QUERY=$numeric_result" >> $GITHUB_ENV

    - name: Migrations added/ in this PR
      run: |
        number2=${{ env.SECOND_QUERY }}
        number1=${{ env.FIRST_QUERY }}
        diff=$((number2 - number1))
        if [ $number2 -gt $number1 ]; then
          data=$(mysql -h 127.0.0.1 -uedxapp001 -ppassword -e "select app, name as from django_migrations ORDER by -id limit $diff;" edxapp;)
          echo -e "**Migrations added in this PR**\n$data" > cleaned_data.txt
        elif [ $number1 -gt $number2 ]; then
           echo "**Your pull request has removed migrations. This could pose a risk if it's done unintentionally**" > cleaned_data.txt
        fi
      shell: bash

    - name: Comment PR
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath:  cleaned_data.txt
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
