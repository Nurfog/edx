"""
This script generates code owner mappings for monitoring LMS.

Sample usage::

    python lms/djangoapps/monitoring/scripts/generate_code_owner_mappings.py --repo-csv "Individual Repo Ownership.csv" --app-csv "edx-platform Apps Ownership.csv" --dep-csv "edx-platform 3rd-party Ownership.csv"

Or for more details::

    python lms/djangoapps/monitoring/scripts/generate_code_owner_mappings.py --help


"""
import csv
import click
import os
import re

# Maps edx Django apps to their containing repo
EDX_REPO_APPS = {
    'bulk_grades': 'edx-bulk-grades',
    'coaching': 'platform-plugin-coaching',
    'completion': 'completion',
    'config_models': 'django-config-models',
    'consent': 'edx-enterprise',
    'csrf': 'edx-drf-extensions',
    'edx_proctoring': 'edx-proctoring',
    'edxval': 'edx-val',
    'enterprise': 'edx-enterprise',
    'enterprise_learner_portal': 'edx-enterprise',
    'help_tokens': 'help-tokens',
    'integrated_channels': 'edx-enterprise',
    'organizations': 'edx-organizations',
    'search': 'edx-search',
    'wiki': 'django-wiki',
}

# Maps third-party Django apps to their containing repo
THIRD_PARTY_APPS = {
    'django': 'django',
    'django_object_actions': 'django-object-actions',
    'drf_yasg': 'drf-yasg',
    'lx_pathway_plugin': 'lx-pathway-plugin',
    'simple_history': 'django-simple-history',
    'social_django': 'social-app-django',
}


@click.command()
@click.option(
    '--repo-csv',
    help="File name of .csv file with repo ownership details.",
    required=True
)
@click.option(
    '--app-csv',
    help="File name of .csv file with edx-platform app ownership details.",
    required=True
)
@click.option(
    '--dep-csv',
    help="File name of .csv file with edx-platform 3rd-party dependency ownership details.",
    required=True
)
def main(repo_csv, app_csv, dep_csv):
    """
    Reads CSV of ownership data and outputs config.yml setting to system.out.

    Expected Repo CSV format:

        \b
        repo name,owner.squad
        edx-platform,team-red
        edx-proctoring,team-blue
        ...

    Expected App CSV format:

        \b
        Path,owner.squad
        ./lms/templates/oauth2_provider,team-red
        ./openedx/core/djangoapps/user_authn,team-blue
        ...

    Expected 3rd-party Dependency CSV format:

        \b
        repo name,repo url,owner.squad
        django,team-red
        social-app-django,team-blue
        ...

    Final output only includes paths which might contain views.

    """
    owner_to_paths_map = {}
    _map_repo_apps('edx-repo', repo_csv, EDX_REPO_APPS, owner_to_paths_map)
    _map_repo_apps('3rd-party', dep_csv, THIRD_PARTY_APPS, owner_to_paths_map)
    _map_edx_platform_apps(app_csv, owner_to_paths_map)

    print('# Do not hand edit CODE_OWNER_MAPPINGS. Generated by {}'.format(os.path.basename(__file__)))
    print('CODE_OWNER_MAPPINGS:')
    for owner, path_list in sorted(owner_to_paths_map.items()):
        print("  {}:".format(owner))
        path_list.sort()
        for path in path_list:
            print("  - {}".format(path))


def _map_repo_apps(csv_type, repo_csv, app_to_repo_map, owner_to_paths_map):
    """
    Reads CSV of repo ownership and uses app_to_repo_map to updates owner_to_paths_map

    Arguments:
        csv_type (string): Either 'edx-repo' or '3rd-party' for warning message
        repo_csv (string): File name for the edx-repo or 3rd-party repo csv
        app_to_repo_map (dict): Dict mapping apps to repos
        owner_to_paths_map (dict): Holds results mapping owner to paths.

    """
    with open(repo_csv, 'r') as file:
        csv_data = file.read()
    reader = csv.DictReader(csv_data.splitlines())

    csv_repo_to_owner_map = {}
    for row in reader:
        csv_repo_to_owner_map[row.get('repo name')] = row.get('owner.squad')

    for app, repo in app_to_repo_map.items():
        owner = csv_repo_to_owner_map.get(repo, None)
        if owner:
            if owner not in owner_to_paths_map:
                owner_to_paths_map[owner] = []
            owner_to_paths_map[owner].append(app)
        else:
            print('WARNING: Repo {} was not found in {} csv. Needed for app {}.'.format(repo, csv_type, app))


def _map_edx_platform_apps(app_csv, owner_to_paths_map):
    """
    Reads CSV of edx-platform app ownership and updates mappings
    """
    with open(app_csv, 'r') as file:
        csv_data = file.read()
    reader = csv.DictReader(csv_data.splitlines())
    for row in reader:
        path = row.get('Path')
        owner = row.get('owner.squad')

        # add paths that may have views
        may_have_views = re.match(r'.*djangoapps', path) or re.match(r'[./]*openedx\/features', path)
        # remove cms (studio) paths and tests
        may_have_views = may_have_views and not re.match(r'.*(\/tests\b|cms\/).*', path)

        if may_have_views:
            path = path.replace('./', '')  # remove ./ from beginning of path
            path = path.replace('/', '.')  # convert path to dotted module name

            # skip catch-alls to ensure everything is properly mapped
            if path in ('common.djangoapps', 'lms.djangoapps', 'openedx.core.djangoapps', 'openedx.features'):
                continue

            if owner not in owner_to_paths_map:
                owner_to_paths_map[owner] = []
            owner_to_paths_map[owner].append(path)


if __name__ == "__main__":
    main()  # pylint: disable=no-value-for-parameter
