def runBokchoyTests() {
    sshagent(credentials: ['jenkins-worker'], ignoreMissing: true) {
        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '${ghprbActualCommit}']],
            doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', honorRefspec: true,
            noTags: true, shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-worker',
            refspec: '+refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*',
            url: 'git@github.com:edx/edx-platform.git']]]
        console_output = sh(returnStdout: true, script: 'bash scripts/all-tests.sh').trim()
        dir('stdout') {
            writeFile file: "${TEST_SUITE}-stdout.log", text: console_output
        }
    }
}

def bokchoyTestCleanup() {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'test_root/log/**/*.log,stdout/*.log,*.log'
    junit '**/reports/bok_choy/**/xunit.xml'
}

pipeline {
    agent { label "jenkins-worker" }
    options {
        timestamps()
        timeout(60)
    }
    stages {
        stage("Run tests") {
            steps {
                script {
                    def parallel_stages = [:]
                    for (int i = 1; i <= 22; i++) {
                        int index = i
                        parallel_stages["${index}"] = {
                            node('jenkins-worker') {
                                withEnv(['SHARD=${index}','TEST_SUITE=bok-choy']) {
                                    try {
                                        stage("Bokchoy shard: ${index}") {
                                            runBokchoyTests()
                                        }
                                    } finally {
                                        bokchoyTestCleanup()
                                    }
                                }
                            }
                        }
                    }
                    parallel parallel_stages
                }
            }
        }
    }
}
